namespace IDisposableGenerator;

using System;

internal class WorkItem
{
    public string Namespace { get; set; } = null!;
    public List<ClassItems> Classes { get; } = [];

    public ClassItems? GetClassItems(INamedTypeSymbol testClass)
        => this.Classes.FirstOrDefault(
            classItem => classItem.NameEquals(testClass.Name));

    [ExcludeFromCodeCoverage]
    public override string ToString()
    {
        var sb = new StringBuilder($"Namespace: Name: {this.Namespace}");
        foreach (var classItems in this.Classes)
        {
            _ = sb.AppendLine();
            _ = sb.Append($"Class Item {this.Classes.IndexOf(classItems)}: {classItems}");
        }

        return sb.ToString();
    }

    public string ToCSharp9CodeString()
    {
        var result = new StringBuilder();
        _ = result.Append($@"
{(!string.IsNullOrEmpty(this.Namespace) ? $@"namespace {this.Namespace}
{{
    " : string.Empty)}using global::System;
");
        foreach (var classItem in this.Classes)
        {
            var code = classItem.ToCSharp9CodeString();
            if (string.IsNullOrEmpty(this.Namespace))
            {
                code = ReduceIndentation(code);
            }

            _ = result.Append(code);
        }

        if (!string.IsNullOrEmpty(this.Namespace))
        {
            _ = result.Append(@"}
");
        }

        return result.ToString();
    }

    public StringBuilder ToCSharp10CodeString()
    {
        var result = new StringBuilder("// <autogenerated/>");
        _ = result.Append($@"
{(!string.IsNullOrEmpty(this.Namespace) ? $@"namespace {this.Namespace};
" : string.Empty)}");
        foreach (var classItem in this.Classes)
        {
            _ = result.Append(classItem.ToCSharp10CodeString());
        }

        return result;
    }

    public string ToVisualBasicCodeString()
    {
        var result = new StringBuilder();
        if (!string.IsNullOrEmpty(this.Namespace))
        {
            _ = result.Append($@"
Namespace {this.Namespace}
");
        }

        foreach (var classItem in this.Classes)
        {
            var code = classItem.ToVisualBasicCodeString();
            if (string.IsNullOrEmpty(this.Namespace))
            {
                code = ReduceIndentation(code);
            }

            _ = result.Append(code);
        }

        if (!string.IsNullOrEmpty(this.Namespace))
        {
            _ = result.Append(@"End Namespace
");
        }

        return result.ToString();
    }

    private static string ReduceIndentation(string code)
    {
        var eol = (code.Contains("\r\n"), code.Contains("\n")) switch
        {
            (true, true) => "\r\n",
            (false, true) => "\n",
            (false, false) => "\r",
            _ => throw new InvalidOperationException("bug"),
        };

        var lines = code.Split([eol], StringSplitOptions.None);
        for (var i = 0; i < lines.Length; i++)
        {
            if (lines[i].StartsWith("    ", StringComparison.Ordinal))
            {
                lines[i] = lines[i].Substring(4);
            }
        }

        return string.Join(eol, lines);
    }
}
