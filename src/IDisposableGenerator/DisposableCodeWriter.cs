namespace IDisposableGenerator;

internal static class DisposableCodeWriter
{
    public static void WriteDisposableCodeVisualBasic(
        WorkItemCollection workItemCollection,
        ref SourceProductionContext context)
    {
        StringBuilder sourceBuilder = new("' <autogenerated/>");
        _ = sourceBuilder.Append(@"
Imports System
");
        foreach (var workItem in workItemCollection.GetWorkItems())
        {
            _ = sourceBuilder.Append(workItem.ToVisualBasicCodeString());
        }

        // inject the created sources into the users compilation.
        sourceBuilder.ToSourceFile("Disposables.g.vb", ref context);
    }

    public static void WriteDisposableCodeCSharp10(
        WorkItemCollection workItemCollection,
        ref SourceProductionContext context)
    {
        foreach (var workItem in workItemCollection.GetWorkItems())
        {
            var sourceBuilder = workItem.ToCSharp10CodeString();

            // inject the created sources into the users compilation.
            sourceBuilder.ToSourceFile($@"Disposables{(
                workItemCollection.Count > 1
                    ? $".{workItemCollection.IndexOf(workItem)}" :
                    string.Empty)}.g.cs", ref context);
        }
    }

    public static void WriteDisposableCodeCSharp9(
        WorkItemCollection workItemCollection,
        ref SourceProductionContext context)
    {
        StringBuilder sourceBuilder = new("// <autogenerated/>");
        foreach (var workItem in workItemCollection.GetWorkItems())
        {
            _ = sourceBuilder.Append(workItem.ToCSharp9CodeString());
        }

        // inject the created source into the users compilation.
        sourceBuilder.ToSourceFile("Disposables.g.cs", ref context);
    }
}
